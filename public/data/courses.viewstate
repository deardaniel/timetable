/wEPDwUJODg0OTY2MzM5D2QWAmYPZBYCAgMPZBYIZg8WAh4HVmlzaWJsZWhkAgIPFgIfAGhkAgUPZBYGAgEPFgIeC18hSXRlbUNvdW50AgEWAgIBD2QWAgIBDw8WAh4EVGV4dAUeU3ByaW5nIDIwMTkvMjAgQ2xhc3MgVGltZXRhYmxlZGQCAw8QZGQWAWZkAgUPEA8WBh4ORGF0YVZhbHVlRmllbGQFB0xNX0NPREUeDURhdGFUZXh0RmllbGQFEENSU19USVRMX0xNX0NPREUeC18hRGF0YUJvdW5kZ2QQFcECF1BsZWFzZSBzZWxlY3QgYSBjb3Vyc2U6IEJhY2hlbG9yIG9mIEFyY2hpdGVjdHVyZSAoTE0wOTkpGEJhY2hlbG9yIG9mIEFydHMgKExNMDAyKS1CYWNoZWxvciBvZiBBcnRzIGluIEFwcGxpZWQgTGFuZ3VhZ2VzIChMTTA0NClBQmFjaGVsb3Igb2YgQXJ0cyBpbiBBcHBsaWVkIFBvbGljaW5nIGFuZCBDcmltaW5hbCBKdXN0aWNlIChMTTI0OSksQmFjaGVsb3Igb2YgQXJ0cyBpbiBBcHBsaWVkIFRheGF0aW9uIChMTTIyNykuQmFjaGVsb3Igb2YgQXJ0cyBpbiBDb250ZW1wb3JhcnkgRGFuY2UgKExNMTMzKSxCYWNoZWxvciBvZiBBcnRzIGluIENyaW1pbmFsIEp1c3RpY2UgKExNMDI4KSxCYWNoZWxvciBvZiBBcnRzIGluIEV1cm9wZWFuIFN0dWRpZXMgKExNMDQwKTVCYWNoZWxvciBvZiBBcnRzIGluIEh1bWFuIFJlc291cmNlIE1hbmFnZW1lbnQgKExNMjE1KTJCYWNoZWxvciBvZiBBcnRzIGluIEludGVybmF0aW9uYWwgQnVzaW5lc3MgKExNMDU2KUhCYWNoZWxvciBvZiBBcnRzIGluIEludGVybmF0aW9uYWwgSW5zdXJhbmNlIGFuZCBFdXJvcGVhbiBTdHVkaWVzIChMTTA0MyknQmFjaGVsb3Igb2YgQXJ0cyBpbiBJcmlzaCBEYW5jZSAoTE0xMzIpJ0JhY2hlbG9yIG9mIEFydHMgaW4gSXJpc2ggTXVzaWMgKExNMTMxKUBCYWNoZWxvciBvZiBBcnRzIGluIEpvdXJuYWxpc20gYW5kIERpZ2l0YWwgQ29tbXVuaWNhdGlvbiAoTE0wMzkpNEJhY2hlbG9yIG9mIEFydHMgaW4gSm91cm5hbGlzbSBhbmQgTmV3IE1lZGlhIChMTTAzOSkuQmFjaGVsb3Igb2YgQXJ0cyBpbiBMYXcgYW5kIEFjY291bnRpbmcgKExNMDIwKStCYWNoZWxvciBvZiBBcnRzIGluIFBlcmZvcm1pbmcgQXJ0cyAoTE0wMjYpQEJhY2hlbG9yIG9mIEFydHMgaW4gUG9saXRpY3MgYW5kIEludGVybmF0aW9uYWwgUmVsYXRpb25zIChMTTAyMik0QmFjaGVsb3Igb2YgQXJ0cyBpbiBQc3ljaG9sb2d5IGFuZCBTb2Npb2xvZ3kgKExNMDM4KSBCYWNoZWxvciBvZiBBcnRzIGluIFRlc3QgKExNNjk4KSFCYWNoZWxvciBvZiBBcnRzIGluIFZvaWNlIChMTTEzNCknQmFjaGVsb3Igb2YgQXJ0cyBpbiBXb3JsZCBNdXNpYyAoTE0xMzUpJEJhY2hlbG9yIG9mIEJ1c2luZXNzIFN0dWRpZXMgKExNMDUwKTBCYWNoZWxvciBvZiBCdXNpbmVzcyBTdHVkaWVzIHdpdGggRnJlbmNoIChMTTA1MikwQmFjaGVsb3Igb2YgQnVzaW5lc3MgU3R1ZGllcyB3aXRoIEdlcm1hbiAoTE0wNTMpMkJhY2hlbG9yIG9mIEJ1c2luZXNzIFN0dWRpZXMgd2l0aCBKYXBhbmVzZSAoTE0wNTUpMUJhY2hlbG9yIG9mIEJ1c2luZXNzIFN0dWRpZXMgd2l0aCBTcGFuaXNoIChMTTA1NCkqQmFjaGVsb3Igb2YgRWR1Y2F0aW9uIGluIExhbmd1YWdlcyAoTE0wOTEpH0JhY2hlbG9yIG9mIEVuZ2luZWVyaW5nIChMTTExNik7QmFjaGVsb3Igb2YgRW5naW5lZXJpbmcgaW4gQWVyb25hdXRpY2FsIEVuZ2luZWVyaW5nIChMTTA3Nyk5QmFjaGVsb3Igb2YgRW5naW5lZXJpbmcgaW4gQmlvbWVkaWNhbCBFbmdpbmVlcmluZyAoTE0wNzEpR0JhY2hlbG9yIG9mIEVuZ2luZWVyaW5nIGluIENoZW1pY2FsIGFuZCBCaW9jaGVtaWNhbCBFbmdpbmVlcmluZyAoTE0xMTUpNEJhY2hlbG9yIG9mIEVuZ2luZWVyaW5nIGluIENpdmlsIEVuZ2luZWVyaW5nIChMTTA4NSk5QmFjaGVsb3Igb2YgRW5naW5lZXJpbmcgaW4gRGVzaWduIGFuZCBNYW51ZmFjdHVyZSAoTE0xMTkpRkJhY2hlbG9yIG9mIEVuZ2luZWVyaW5nIGluIEVsZWN0cm9uaWMgYW5kIENvbXB1dGVyIEVuZ2luZWVyaW5nIChMTTExOCk5QmFjaGVsb3Igb2YgRW5naW5lZXJpbmcgaW4gTWVjaGFuaWNhbCBFbmdpbmVlcmluZyAoTE0wNzMpGEJhY2hlbG9yIG9mIExhd3MgKExNMDQ5KRhCYWNoZWxvciBvZiBMYXdzIChMTTIzMCkjQmFjaGVsb3Igb2YgTGF3cyAoTGF3IFBsdXMpIChMTTAyOSkwQmFjaGVsb3Igb2YgTWVkaWNpbmUgQmFjaGVsb3Igb2YgU3VyZ2VyeSAoTE0xMDEpZEJhY2hlbG9yIG9mIFNjaWVuY2UgKEVkdWNhdGlvbikgaW4gQmlvbG9neSB3aXRoIFBoeXNpY3Mgb3IgQ2hlbWlzdHJ5IG9yIEFncmljdWx0dXJhbCBTY2llbmNlIChMTTA5MilLQmFjaGVsb3Igb2YgU2NpZW5jZSAoRWR1Y2F0aW9uKSBpbiBNYXRoZW1hdGljcyBhbmQgQ29tcHV0ZXIgU2NpZW5jZSAoTE0wOTcpVkJhY2hlbG9yIG9mIFNjaWVuY2UgKEVkdWNhdGlvbikgaW4gUGh5c2ljYWwgU2NpZW5jZSB3aXRoIENoZW1pc3RyeSBhbmQgUGh5c2ljcyAoTE0wOTYpLUJhY2hlbG9yIG9mIFNjaWVuY2UgTnVyc2luZyAoR2VuZXJhbCkgKExNMTUwKT1CYWNoZWxvciBvZiBTY2llbmNlIE51cnNpbmcgKEludGVsbGVjdHVhbCBEaXNhYmlsaXR5KSAoTE0xNTQpM0JhY2hlbG9yIG9mIFNjaWVuY2UgTnVyc2luZyAoTWVudGFsIEhlYWx0aCkgKExNMTUyKVFCYWNoZWxvciBvZiBTY2llbmNlIGluIEFpcmNyYWZ0IE1haW50ZW5hbmNlIGFuZCBBaXJ3b3J0aGluZXNzIEVuZ2luZWVyaW5nIChMTTEyMCkuQmFjaGVsb3Igb2YgU2NpZW5jZSBpbiBBcHBsaWVkIFBoeXNpY3MgKExNMDY1KT9CYWNoZWxvciBvZiBTY2llbmNlIGluIEJpb2xvZ2ljYWwgYW5kIENoZW1pY2FsIFNjaWVuY2VzIChMTTEyMykpQmFjaGVsb3Igb2YgU2NpZW5jZSBpbiBCaW9zY2llbmNlIChMTTE4Nyk5QmFjaGVsb3Igb2YgU2NpZW5jZSBpbiBDb21wdXRlciBHYW1lcyBEZXZlbG9wbWVudCAoTE0xMTApL0JhY2hlbG9yIG9mIFNjaWVuY2UgaW4gQ29tcHV0ZXIgU2NpZW5jZSAoTE0xMjEpL0JhY2hlbG9yIG9mIFNjaWVuY2UgaW4gQ29tcHV0ZXIgU3lzdGVtcyAoTE0wNTEpRkJhY2hlbG9yIG9mIFNjaWVuY2UgaW4gQ29uc3RydWN0aW9uIE1hbmFnZW1lbnQgYW5kIEVuZ2luZWVyaW5nIChMTTA4MilEQmFjaGVsb3Igb2YgU2NpZW5jZSBpbiBDcmVhdGl2ZSBNZWRpYSBhbmQgSW50ZXJhY3RpdmUgRGVzaWduIChMTTEyMikzQmFjaGVsb3Igb2YgU2NpZW5jZSBpbiBEaWdpdGFsIE1lZGlhIERlc2lnbiAoTE0xMTMpQkJhY2hlbG9yIG9mIFNjaWVuY2UgaW4gRWNvbm9taWNzIGFuZCBNYXRoZW1hdGljYWwgU2NpZW5jZXMgKExNMDM3KThCYWNoZWxvciBvZiBTY2llbmNlIGluIEVjb25vbWljcyBhbmQgTWF0aGVtYXRpY3MgKExNMDM3KTJCYWNoZWxvciBvZiBTY2llbmNlIGluIEVuZ2luZWVyaW5nIFNjaWVuY2UgKExNMjYxKTRCYWNoZWxvciBvZiBTY2llbmNlIGluIEVudmlyb25tZW50YWwgU2NpZW5jZSAoTE0wNjYpLUJhY2hlbG9yIG9mIFNjaWVuY2UgaW4gRXF1aW5lIFNjaWVuY2UgKExNMDkzKThCYWNoZWxvciBvZiBTY2llbmNlIGluIEVxdWluZSBTY2llbmNlIFRyYW5zZmVyZWUgKExNMTg2KTpCYWNoZWxvciBvZiBTY2llbmNlIGluIEV4ZXJjaXNlIGFuZCBIZWFsdGggRml0bmVzcyAoTE0yMDMpOkJhY2hlbG9yIG9mIFNjaWVuY2UgaW4gRXhlcmNpc2UgYW5kIEhlYWx0aCBGaXRuZXNzIChMTTI2Nik0QmFjaGVsb3Igb2YgU2NpZW5jZSBpbiBGaW5hbmNpYWwgTWF0aGVtYXRpY3MgKExNMDU4KTZCYWNoZWxvciBvZiBTY2llbmNlIGluIEZvb2QgU2NpZW5jZSBhbmQgSGVhbHRoIChMTTA2OCk2QmFjaGVsb3Igb2YgU2NpZW5jZSBpbiBJbmR1c3RyaWFsIEJpb2NoZW1pc3RyeSAoTE0wNjQpNEJhY2hlbG9yIG9mIFNjaWVuY2UgaW4gTWF0aGVtYXRpY2FsIFNjaWVuY2VzIChMTTA2MCkqQmFjaGVsb3Igb2YgU2NpZW5jZSBpbiBNYXRoZW1hdGljcyAoTE0xMjQpNkJhY2hlbG9yIG9mIFNjaWVuY2UgaW4gTWF0aGVtYXRpY3MgYW5kIFBoeXNpY3MgKExNMDg4KShCYWNoZWxvciBvZiBTY2llbmNlIGluIE1pZHdpZmVyeSAoTE0xNTYpQUJhY2hlbG9yIG9mIFNjaWVuY2UgaW4gTW9iaWxlIENvbW11bmljYXRpb25zIGFuZCBTZWN1cml0eSAoTE0wODMpRkJhY2hlbG9yIG9mIFNjaWVuY2UgaW4gTXVzaWMsIE1lZGlhIGFuZCBQZXJmb3JtYW5jZSBUZWNobm9sb2d5IChMTTExNCkuQmFjaGVsb3Igb2YgU2NpZW5jZSBpbiBOdXJzaW5nIFN0dWRpZXMgKExNMTk2KTBCYWNoZWxvciBvZiBTY2llbmNlIGluIFBhcmFtZWRpYyBTdHVkaWVzIChMTTEwMyk/QmFjaGVsb3Igb2YgU2NpZW5jZSBpbiBQYXJhbWVkaWMgU3R1ZGllcyAoUHJhY3RpdGlvbmVyKSAoTE0yNjMpRkJhY2hlbG9yIG9mIFNjaWVuY2UgaW4gUGhhcm1hY2V1dGljYWwgYW5kIEluZHVzdHJpYWwgQ2hlbWlzdHJ5IChMTTA2MSkxQmFjaGVsb3Igb2YgU2NpZW5jZSBpbiBQaHlzaWNhbCBFZHVjYXRpb24gKExNMDkwKSZCYWNoZWxvciBvZiBTY2llbmNlIGluIFBoeXNpY3MgKExNMTI1KSxCYWNoZWxvciBvZiBTY2llbmNlIGluIFBoeXNpb3RoZXJhcHkgKExNMTAwKTxCYWNoZWxvciBvZiBTY2llbmNlIGluIFByb2R1Y3QgRGVzaWduIGFuZCBUZWNobm9sb2d5IChMTTA3NikpQmFjaGVsb3Igb2YgU2NpZW5jZSBpbiBQc3ljaG9sb2d5IChMTTEwMik9QmFjaGVsb3Igb2YgU2NpZW5jZSBpbiBRdWFsaXR5IGFuZCBSZWd1bGF0b3J5IEFmZmFpcnMgKExNOTUwKTpCYWNoZWxvciBvZiBTY2llbmNlIGluIFNwb3J0IGFuZCBFeGVyY2lzZSBTY2llbmNlcyAoTE0wODkpNkJhY2hlbG9yIG9mIFNjaWVuY2UgaW4gU3VwcGx5IENoYWluIE1hbmFnZW1lbnQgKExNMjY5KTRCYWNoZWxvciBvZiBTY2llbmNlIGluIFRlY2hub2xvZ3kgTWFuYWdlbWVudCAoTE0wNjMpVkJhY2hlbG9yIG9mIFRlY2hub2xvZ3kgIChFZHVjYXRpb24pICBpbiBNYXRlcmlhbHMgYW5kIEFyY2hpdGVjdHVyYWwgVGVjaG5vbG9neSAoTE0wOTQpU0JhY2hlbG9yIG9mIFRlY2hub2xvZ3kgIChFZHVjYXRpb24pIGluIE1hdGVyaWFscyBhbmQgRW5naW5lZXJpbmcgVGVjaG5vbG9neSAoTE0wOTUpGkJsYXMgU3VtbWVyIFNjaG9vbCAoTE1YWFgpOkNlcnRpZmljYXRlIGluIEFjY2VzcyBTdHVkaWVzIGZvciBIaWdoZXIgRWR1Y2F0aW9uIChMTTE5MikuQ2VydGlmaWNhdGUgaW4gQXJ0aWZpY2lhbCBJbnRlbGxpZ2VuY2UgKExNOTU2KSVDZXJ0aWZpY2F0ZSBpbiBFcXVpbmUgU2NpZW5jZSAoTE0xODApMkNlcnRpZmljYXRlIGluIEV4ZXJjaXNlIGFuZCBIZWFsdGggRml0bmVzcyAoTE0yNDMpMkNlcnRpZmljYXRlIGluIEV4ZXJjaXNlIGFuZCBIZWFsdGggRml0bmVzcyAoTE0yNjgpQUNlcnRpZmljYXRlIGluIEhpc3Rvcnkgb2YgRmFtaWx5IGFuZCBHZW5lYWxvZ2ljYWwgTWV0aG9kcyAoTE0yNjApOkNlcnRpZmljYXRlIGluIExhbmd1YWdlIGFuZCBJbnRlcm5hdGlvbmFsIEJ1c2luZXNzIChMTTQ5MCkvQ2VydGlmaWNhdGUgaW4gTGVhbiBhbmQgUXVhbGl0eSBTeXN0ZW1zIChMTTI0OCkkQ2VydGlmaWNhdGUgaW4gTG9jYWwgSGlzdG9yeSAoTE0yMzYpNUNlcnRpZmljYXRlIGluIE1hbmFnZW1lbnQgLSBEaXN0YW5jZSBMZWFybmluZyAoTE00MTUpJkNlcnRpZmljYXRlIGluIE11c2ljIGFuZCBEYW5jZSAoTE0xMzApPENlcnRpZmljYXRlIGluIE51cnNpbmcgKE51cnNlIC8gTWlkd2lmZSBQcmVzY3JpYmluZykgKExNMTk1KUVDZXJ0aWZpY2F0ZSBpbiBQdWJsaWMgUHJvY3VyZW1lbnQgYW5kIFN1cHBseSBDaGFpbiBFeGNlbGxlbmNlIChMTTI3OSkfQ2VydGlmaWNhdGUgaW4gUm9ib3RpY3MgKExNMjc4KVRDZXJ0aWZpY2F0ZSBpbiBTdXBwbHkgQ2hhaW4gTWFuYWdlbWVudCAoUHJvZHVjdGlvbiBhbmQgSW52ZW50b3J5IE1hbmFnZW1lbnQpIChMTTI3MikqQ2VydGlmaWNhdGUgb2YgUXVhbGl0eSBFbmdpbmVlcmluZyAoTE0yNjIpKURpb3Bsw7NtYSBzYSBHaGFlaWxnZSBGaGVpZGhtZWFjaCAoTE00MTgpQURpb3Bsw7NtYSBzYSBHaGFlaWxnZTogQW4gR2hhZWlsZ2Ugc2EgU2FvbCBDb21oYWltc2VhcnRoYSAoTE0yMzcpLURpcGxvbWEgaW4gQXBwbGllZCBUYXggQWRtaW5pc3RyYXRpb24gKExNMjg4KSNEaXBsb21hIGluIEFwcGxpZWQgVGF4YXRpb24gKExNMjIyKSNEaXBsb21hIGluIEFwcGxpZWQgVGF4YXRpb24gKExNMjI4KU5EaXBsb21hIGluIENvbW11bml0eSwgV2VsbG5lc3MsIEVtcG93ZXJtZW50LCBMZWFkZXJzaGlwIGFuZCBMaWZlc2tpbGxzIChMTTIwMCkrRGlwbG9tYSBpbiBEcnVnIGFuZCBBbGNvaG9sIFN0dWRpZXMgKExNMjE5KSFEaXBsb21hIGluIEVxdWluZSBTY2llbmNlIChMTTE4MikuRGlwbG9tYSBpbiBFeGVyY2lzZSBhbmQgSGVhbHRoIEZpdG5lc3MgKExNMjAyKS5EaXBsb21hIGluIEV4ZXJjaXNlIGFuZCBIZWFsdGggRml0bmVzcyAoTE0yNjcpLURpcGxvbWEgaW4gSGVhbHRoIFNlcnZpY2VzIE1hbmFnZW1lbnQgKExNNDEwKSxEaXBsb21hIGluIEh1bWFuIFJlc291cmNlIE1hbmFnZW1lbnQgKExNMjI5KR1EaXBsb21hIGluIE1hbmFnZW1lbnQgKExNNDEyKUFEaXBsb21hIGluIFB1YmxpYyBQcm9jdXJlbWVudCBhbmQgU3VwcGx5IENoYWluIEV4Y2VsbGVuY2UgKExNNDczKSpEaXBsb21hIGluIFN1cHBseSBDaGFpbiBNYW5hZ2VtZW50IChMTTI2NCkqRGlwbG9tYSBpbiBTdXBwbHkgQ2hhaW4gTWFuYWdlbWVudCAoTE0yODApNURpcGxvbWEgaW4gU3VwcGx5IENoYWluIE1hbmFnZW1lbnQgT3BlcmF0aW9ucyAoTE0yMDkpJURvY3RvciBvZiBDbGluaWNhbCBQc3ljaG9sb2d5IChMTTYxMClKRG9jdG9yYXRlIGluIEFydHMsIEh1bWFuaXRpZXMgYW5kIFNvY2lhbCBTY2llbmNlcyAoU3RydWN0dXJlZCBQaEQpIChMTTgxMSkgRG9jdG9yYXRlIGluIEVuZ2luZWVyaW5nIChMTTcxNylbR1JBRFVBVEUgRElQTE9NQSBJTiBDUklNSU5BTCBBU1NFVFMgQlVSRUFVOiBQUk9DRUVEUyBPRiBDUklNRSAmIEFTU0VUIElOVkVTVElHQVRJT04gKExNNzMwKTtHcmFkdWF0ZSBDZXJ0aWZpY2F0ZSBpbiBTZXJpb3VzIENyaW1lIEludmVzdGlnYXRpb24gKExNNDk0KTFHcmFkdWF0ZSBDZXJ0aWZpY2F0ZSBpbiBUZWNobmljYWwgV3JpdGluZyAoTE00MDUpMEdyYWR1YXRlIERpcGxvbWEgaW4gQ2hlbWljYWwgRW5naW5lZXJpbmcgKExNMzc5KTBHcmFkdWF0ZSBEaXBsb21hIGluIENvbXB1dGVyIEVuZ2luZWVyaW5nIChMTTMzMSkmR3JhZHVhdGUgRGlwbG9tYSBpbiBKb3VybmFsaXNtIChMTTQwOCkmR3JhZHVhdGUgRGlwbG9tYSBpbiBKb3VybmFsaXNtIChMTTU5MSkxR3JhZHVhdGUgRGlwbG9tYSBpbiBQZWFjZSBhbmQgRGV2ZWxvcG1lbnQgKExNNjU0KTFHcmFkdWF0ZSBEaXBsb21hIGluIFB1YmxpYyBBZG1pbmlzdHJhdGlvbiAoTE01ODgpMUdyYWR1YXRlIERpcGxvbWEgaW4gU2FmZXR5IGFuZCBFcmdvbm9taWNzIChMTTM2NCkzR3JhZHVhdGUgRGlwbG9tYSBpbiBTcGVjaWFsIEVkdWNhdGlvbiBOZWVkcyAoTE0zNDApPUdyYWR1YXRlIERpcGxvbWEgaW4gVGVhY2hpbmcgTGVhcm5pbmcgYW5kIFNjaG9sYXJzaGlwIChMTTQ2NylCR3JhZHVhdGUgRGlwbG9tYSBpbiBUZWNobmljYWwgQ29tbXVuaWNhdGlvbiBhbmQgRS1MZWFybmluZyAoTE00MzYpOUhpZ2hlciBDZXJ0aWZpY2F0ZSBpbiBFeGVyY2lzZSBhbmQgSGVhbHRoIEZpdG5lc3MgKExNMjAxKUZIaWdoZXIgQ2VydGlmaWNhdGUgaW4gU3VwZXJ2aXNvcnkgYW5kIEh1bWFuIFJlc291cmNlcyBQcmFjdGljZSAoTE0yNzApQUhpZ2hlciBEaXBsb21hIGluIERhdGEgQW5hbHl0aWNzIGFuZCBTb2Z0d2FyZSBEZXZlbG9wbWVudCAoTE02MzcpOkhpZ2hlciBEaXBsb21hIGluIEludGVybmF0aW9uYWwgRmluYW5jaWFsIFNlcnZpY2VzIChMTTI4NCk2SGlnaGVyIERpcGxvbWEgaW4gTWFudWZhY3R1cmluZyBhbmQgQXV0b21hdGlvbiAoTE0yODEpI0hpZ2hlciBEaXBsb21hIGluIE1pZHdpZmVyeSAoTE0xODUpakhpZ2hlciBEaXBsb21hIGluIFNjaWVuY2UgYW5kIEVuZ2luZWVyaW5nIHdpdGggRW5nbGlzaCBhcyBhIEZvcmVpZ24gTGFuZ3VhZ2UgKFByZSBNYXN0ZXJzIFN0dWRpZXMpIChMTTM3NSkuSGlnaGVyIERpcGxvbWEgaW4gU29mdHdhcmUgRGV2ZWxvcG1lbnQgKExNNzEwKTBJbnRlcm5hdGlvbmFsIFBoRCBpbiBBcnRzIGFuZCBIdW1hbml0aWVzIChMTTkxMSkuTUEgaW4gSHVtYW4gUmlnaHRzIGluIENyaW1pbmFsIEp1c3RpY2UgKExNNTkzKTtNYXN0ZXIgb2YgQXJ0cyBQdWJsaWMgSGlzdG9yeSBhbmQgQ3VsdHVyYWwgSGVyaXRhZ2UgKExNNDkyKTtNYXN0ZXIgb2YgQXJ0cyBQdWJsaWMgSGlzdG9yeSBhbmQgQ3VsdHVyYWwgSGVyaXRhZ2UgKExNNjU3KT1NYXN0ZXIgb2YgQXJ0cyBpbiBBcHBsaWVkIExpbmd1aXN0aWNzIChJbnRlcm5hdGlvbmFsKSAoTE05MDIpLE1hc3RlciBvZiBBcnRzIGluIEFydCBhbmQgVGVjaG5vbG9neSAoTE04MDMpLU1hc3RlciBvZiBBcnRzIGluIEJ1c2luZXNzIE1hbmFnZW1lbnQgKExNMzM1KTZNYXN0ZXIgb2YgQXJ0cyBpbiBDbGFzc2ljYWwgU3RyaW5nIFBlcmZvcm1hbmNlIChMTTMwNykpTWFzdGVyIG9mIEFydHMgaW4gQ29tbXVuaXR5IE11c2ljIChMTTI5OCksTWFzdGVyIG9mIEFydHMgaW4gQ29tbXVuaXR5IFJlc2VhcmNoIChMTTQ5MylFTWFzdGVyIG9mIEFydHMgaW4gQ29tcGFyYXRpdmUgTGl0ZXJhdHVyZSBhbmQgQ3VsdHVyYWwgU3R1ZGllcyAoTE00MDEpRU1hc3RlciBvZiBBcnRzIGluIENvbXBhcmF0aXZlIExpdGVyYXR1cmUgYW5kIEN1bHR1cmFsIFN0dWRpZXMgKExNNTgxKUFNYXN0ZXIgb2YgQXJ0cyBpbiBDb21wb3NpdGlvbiBhbmQgQ3JlYXRpdmUgTXVzaWMgUHJhY3RpY2UgKExNOTA5KSpNYXN0ZXIgb2YgQXJ0cyBpbiBDcmVhdGl2ZSBXcml0aW5nIChMTTkwNCk0TWFzdGVyIG9mIEFydHMgaW4gQ3JlYXRpdmUgV3JpdGluZyBQYXJ0IFRpbWUgKExNOTk3KStNYXN0ZXIgb2YgQXJ0cyBpbiBEYW5jZSBQZXJmb3JtYW5jZSAoTE0yOTcpIU1hc3RlciBvZiBBcnRzIGluIEVuZ2xpc2ggKExNNDM3KSFNYXN0ZXIgb2YgQXJ0cyBpbiBFbmdsaXNoIChMTTcyMCkpTWFzdGVyIG9mIEFydHMgaW4gRXRobm9jaG9yZW9sb2d5IChMTTMxNikpTWFzdGVyIG9mIEFydHMgaW4gRXRobm9tdXNpY29sb2d5IChMTTMxNyk6TWFzdGVyIG9mIEFydHMgaW4gRXVyb3BlYW4gUG9saXRpY3MgYW5kIEdvdmVybmFuY2UgKExNNDQ1KSpNYXN0ZXIgb2YgQXJ0cyBpbiBFdXJvcGVhbiBTdHVkaWVzIChMTTI5NSkmTWFzdGVyIG9mIEFydHMgaW4gRmVzdGl2ZSBBcnRzIChMTTQzOCk1TWFzdGVyIG9mIEFydHMgaW4gR2VuZGVyLCBDdWx0dXJlIGFuZCBTb2NpZXR5IChMTTQyNyk1TWFzdGVyIG9mIEFydHMgaW4gR2VuZGVyLCBDdWx0dXJlIGFuZCBTb2NpZXR5IChMTTU5OCkuTWFzdGVyIG9mIEFydHMgaW4gR2xvYmFsIElyaXNoIFN0dWRpZXMgKExNOTEwKUdNYXN0ZXIgb2YgQXJ0cyBpbiBHdWlkYW5jZSBDb3Vuc2VsbGluZyBhbmQgTGlmZXNwYW4gRGV2ZWxvcG1lbnQgKExNNTc5KTRNYXN0ZXIgb2YgQXJ0cyBpbiBIZWFsdGggRWR1Y2F0aW9uIFByb21vdGlvbiAoTE01NjApIU1hc3RlciBvZiBBcnRzIGluIEhpc3RvcnkgKExNMzg4KS9NYXN0ZXIgb2YgQXJ0cyBpbiBIaXN0b3J5IG9mIHRoZSBGYW1pbHkgKExNNDAyKS9NYXN0ZXIgb2YgQXJ0cyBpbiBIaXN0b3J5IG9mIHRoZSBGYW1pbHkgKExNNTg0KTpNYXN0ZXIgb2YgQXJ0cyBpbiBIdW1hbiBSaWdodHMgaW4gQ3JpbWluYWwgSnVzdGljZSAoTE00MjMpL01hc3RlciBvZiBBcnRzIGluIEludGVybmF0aW9uYWwgU3R1ZGllcyAoTE0zMTEpL01hc3RlciBvZiBBcnRzIGluIEludGVybmF0aW9uYWwgVG91cmlzbSAoTE0zMjcpL01hc3RlciBvZiBBcnRzIGluIEludGVybmF0aW9uYWwgVG91cmlzbSAoTE01MDYpLU1hc3RlciBvZiBBcnRzIGluIElyaXNoIERhbmNlIFN0dWRpZXMgKExNOTA3KS1NYXN0ZXIgb2YgQXJ0cyBpbiBJcmlzaCBNdXNpYyBTdHVkaWVzIChMTTkwOCk9TWFzdGVyIG9mIEFydHMgaW4gSXJpc2ggVHJhZGl0aW9uYWwgTXVzaWMgUGVyZm9ybWFuY2UgKExNMjk2KSRNYXN0ZXIgb2YgQXJ0cyBpbiBKb3VybmFsaXNtIChMTTQwOSkwTWFzdGVyIG9mIEFydHMgaW4gSm91cm5hbGlzbSAoUGFydCBUaW1lKSAoTE00MDkpJ01hc3RlciBvZiBBcnRzIGluIExvY2FsIEhpc3RvcnkgKExNNTA0KSlNYXN0ZXIgb2YgQXJ0cyBpbiBNdXNpYyBFZHVjYXRpb24gKExNMzk5KSdNYXN0ZXIgb2YgQXJ0cyBpbiBNdXNpYyBUaGVyYXB5IChMTTMwOSk3TWFzdGVyIG9mIEFydHMgaW4gUGVhY2UgYW5kIERldmVsb3BtZW50IFN0dWRpZXMgKExNMzA2KSJNYXN0ZXIgb2YgQXJ0cyBpbiBQb2xpdGljcyAoTE00MDYpJE1hc3RlciBvZiBBcnRzIGluIFBzeWNob2xvZ3kgKExNNjI4KS9NYXN0ZXIgb2YgQXJ0cyBpbiBQdWJsaWMgQWRtaW5pc3RyYXRpb24gKExNMzk3KTtNYXN0ZXIgb2YgQXJ0cyBpbiBQdWJsaWMgQWRtaW5pc3RyYXRpb24gKFBhcnQtVGltZSkgKExNNTAyKS9NYXN0ZXIgb2YgQXJ0cyBpbiBSaXR1YWwgQ2hhbnQgYW5kIFNvbmcgKExNMzA4KTVNYXN0ZXIgb2YgQXJ0cyBpbiBTZXJpb3VzIENyaW1lIEludmVzdGlnYXRpb24gKExNNjU2KT1NYXN0ZXIgb2YgQXJ0cyBpbiBTb2Npb2xvZ3kgKEFwcGxpZWQgU29jaWFsIFJlc2VhcmNoKSAoTE0zOTUpPU1hc3RlciBvZiBBcnRzIGluIFNvY2lvbG9neSAoQXBwbGllZCBTb2NpYWwgUmVzZWFyY2gpIChMTTU4NylOTWFzdGVyIG9mIEFydHMgaW4gU29jaW9sb2d5IChZb3V0aCwgQ29tbXVuaXR5IGFuZCBTb2NpYWwgUmVnZW5lcmF0aW9uKSAoTE00NDApTk1hc3RlciBvZiBBcnRzIGluIFNvY2lvbG9neSAoWW91dGgsIENvbW11bml0eSBhbmQgU29jaWFsIFJlZ2VuZXJhdGlvbikgKExNNjUzKSVNYXN0ZXIgb2YgQXJ0cyBpbiBTb25nd3JpdGluZyAoTE00OTEpSU1hc3RlciBvZiBBcnRzIGluIFRlYWNoaW5nIEVuZ2xpc2ggdG8gU3BlYWtlcnMgb2YgT3RoZXIgTGFuZ3VhZ2VzIChMTTMwMSlATWFzdGVyIG9mIEFydHMgaW4gVGVjaG5pY2FsIENvbW11bmljYXRpb24gYW5kIEUtTGVhcm5pbmcgKExNNDM2KUBNYXN0ZXIgb2YgQXJ0cyBpbiBUZWNobmljYWwgQ29tbXVuaWNhdGlvbiBhbmQgRS1MZWFybmluZyAoTE02NTEpOU1hc3RlciBvZiBCdXNpbmVzcyBBZG1pbmlzdHJhdGlvbiAtIEV4ZWN1dGl2ZSBNQkEgKExNNTExKRtNYXN0ZXIgb2YgRWR1Y2F0aW9uIChMTTU1NCkbTWFzdGVyIG9mIEVkdWNhdGlvbiAoTE03MjQpNU1hc3RlciBvZiBFZHVjYXRpb24gaW4gRWR1Y2F0aW9uYWwgTGVhZGVyc2hpcCAoTE01NzMpME1hc3RlciBvZiBFZHVjYXRpb24gaW4gU2Nob29sIExlYWRlcnNoaXAgKExNNzI3KUFNYXN0ZXIgb2YgRW5naW5lZXJpbmcgQ29tcHV0ZXIgYW5kIENvbW11bmljYXRpb25zIFN5c3RlbXMgKExNMzQ2KTlNYXN0ZXIgb2YgRW5naW5lZXJpbmcgaW4gQWVyb25hdXRpY2FsIEVuZ2luZWVyaW5nIChMTTM3MSk1TWFzdGVyIG9mIEVuZ2luZWVyaW5nIGluIENvbXB1dGVyIEVuZ2luZWVyaW5nIChMTTM4NilBTWFzdGVyIG9mIEVuZ2luZWVyaW5nIGluIEluZm9ybWF0aW9uIGFuZCBOZXR3b3JrIFNlY3VyaXR5IChMTTYzNCk3TWFzdGVyIG9mIEVuZ2luZWVyaW5nIGluIE1lY2hhbmljYWwgRW5naW5lZXJpbmcgKExNMzcyKS1NYXN0ZXIgb2YgRW5naW5lZXJpbmcgaW4gTWVjaGF0cm9uaWNzIChMTTM2MyllTWFzdGVyIG9mIEVyYXNtdXMgTXVuZHVzIGluIFBzeWNob2xvZ3kgb2YgR2xvYmFsIE1vYmlsaXR5LCBJbmNsdXNpb24gYW5kIERpdmVyc2l0eSBpbiBTb2NpZXR5IChMTTcyNikgTWFzdGVyIG9mIExhd3MgKEdlbmVyYWwpIChMTTQyNCkgTWFzdGVyIG9mIExhd3MgKEdlbmVyYWwpIChMTTU5NCk6TWFzdGVyIG9mIExhd3MgaW4gSHVtYW4gUmlnaHRzIGluIENyaW1pbmFsIEp1c3RpY2UgKExNNDI2KTpNYXN0ZXIgb2YgTGF3cyBpbiBIdW1hbiBSaWdodHMgaW4gQ3JpbWluYWwgSnVzdGljZSAoTE01OTYpNk1hc3RlciBvZiBMYXdzIGluIEludGVybmF0aW9uYWwgQ29tbWVyY2lhbCBMYXcgKExNNDIxKTZNYXN0ZXIgb2YgTGF3cyBpbiBJbnRlcm5hdGlvbmFsIENvbW1lcmNpYWwgTGF3IChMTTU5Nyk3TWFzdGVyIG9mIFNjaWVuY2UgQWR2YW5jZWQgUHJhY3RpY2UgKE1pZHdpZmVyeSkgKExNNjg3KTVNYXN0ZXIgb2YgU2NpZW5jZSBBZHZhbmNlZCBQcmFjdGljZSAoTnVyc2luZykgKExNNjg2KSdNYXN0ZXIgb2YgU2NpZW5jZSBCaW9wcm9jZXNzaW5nIChMTTgwOSk3TWFzdGVyIG9mIFNjaWVuY2UgSHVtYW4gTnV0cml0aW9uIGFuZCBEaWV0ZXRpY3MgKExNODA0KSFNYXN0ZXIgb2YgU2NpZW5jZSBOdXJzaW5nIChMTTY5NSlKTWFzdGVyIG9mIFNjaWVuY2UgaW4gIEFydGlmaWNpYWwgSW50ZWxsaWdlbmNlIGFuZCBNYWNoaW5lIExlYXJuaW5nIChMTTc5OSk7TWFzdGVyIG9mIFNjaWVuY2UgaW4gQWR2YW5jZWQgRW5naW5lZXJpbmcgTWF0ZXJpYWxzIChMTTM1NSk5TWFzdGVyIG9mIFNjaWVuY2UgaW4gQWR2YW5jZWQgSGVhbHRoY2FyZSBQcmFjdGljZSAoTE02NzkpOU1hc3RlciBvZiBTY2llbmNlIGluIEFkdmFuY2VkIEhlYWx0aGNhcmUgUHJhY3RpY2UgKExNNjgzKS9NYXN0ZXIgb2YgU2NpZW5jZSBpbiBBZHZhbmNlZCBNYXRlcmlhbHMgKExNMzYxKTVNYXN0ZXIgb2YgU2NpZW5jZSBpbiBBZXJvbmF1dGljYWwgRW5naW5lZXJpbmcgKExNODAwKSxNYXN0ZXIgb2YgU2NpZW5jZSBpbiBBcHBsaWVkIFBoeXNpY3MgKExNNjIzKTRNYXN0ZXIgb2YgU2NpZW5jZSBpbiBBcHBsaWVkIFNwb3J0cyBDb2FjaGluZyAoTE05OTApL01hc3RlciBvZiBTY2llbmNlIGluIEFydCBhbmQgVGVjaG5vbG9neSAoTE1YWFgpNE1hc3RlciBvZiBTY2llbmNlIGluIEFydGlmaWNpYWwgSW50ZWxsaWdlbmNlIChMTTcxOSk0TWFzdGVyIG9mIFNjaWVuY2UgaW4gQXJ0aWZpY2lhbCBJbnRlbGxpZ2VuY2UgKExNOTc2KThNYXN0ZXIgb2YgU2NpZW5jZSBpbiBCaW9tZWRpY2FsIERldmljZSBNYXRlcmlhbHMgKExNMzU2KS9NYXN0ZXIgb2YgU2NpZW5jZSBpbiBCdXNpbmVzcyBBbmFseXRpY3MgKExNNDg1KS5NYXN0ZXIgb2YgU2NpZW5jZSBpbiBDaXZpbCBFbmdpbmVlcmluZyAoTE03OTgpPE1hc3RlciBvZiBTY2llbmNlIGluIERlc2lnbiBmb3IgSGVhbHRoIGFuZCBXZWxsYmVpbmcgKExNNjk3KUhNYXN0ZXIgb2YgU2NpZW5jZSBpbiBEZXNpZ24gZm9yIEhlYWx0aCBhbmQgV2VsbGJlaW5nIChQYXJ0LXRpbWUpIChMTTcyOSk6TWFzdGVyIG9mIFNjaWVuY2UgaW4gRGlnaXRhbCBIZWFsdGggVHJhbnNmb3JtYXRpb24gKExNODA4KTpNYXN0ZXIgb2YgU2NpZW5jZSBpbiBFY29ub21pY3MgYW5kIFBvbGljeSBBbmFseXNpcyAoTE00ODEpOk1hc3RlciBvZiBTY2llbmNlIGluIEVjb25vbWljcyBhbmQgUG9saWN5IEFuYWx5c2lzIChMTTQ4MykxTWFzdGVyIG9mIFNjaWVuY2UgaW4gRW5naW5lZXJpbmcgUHJhY3RpY2UgKExNOTc1KS9NYXN0ZXIgb2YgU2NpZW5jZSBpbiBGaW5hbmNpYWwgU2VydmljZXMgKExNMzI5KS9NYXN0ZXIgb2YgU2NpZW5jZSBpbiBIZWFsdGggSW5mb3JtYXRpY3MgKExNNjM1KTlNYXN0ZXIgb2YgU2NpZW5jZSBpbiBIZWFsdGggUHJvZmVzc2lvbnMgRWR1Y2F0aW9uIChMTTcyNSk2TWFzdGVyIG9mIFNjaWVuY2UgaW4gSHVtYW4gUmVzb3VyY2UgTWFuYWdlbWVudCAoTE0zMjgpNk1hc3RlciBvZiBTY2llbmNlIGluIEh1bWFuIFJlc291cmNlIE1hbmFnZW1lbnQgKExNNTEzKUhNYXN0ZXIgb2YgU2NpZW5jZSBpbiBJbmZlY3Rpb24gUHJldmVudGlvbiBhbmQgQ29udHJvbCBMZWFkZXJzaGlwIChMTTgxMylJTWFzdGVyIG9mIFNjaWVuY2UgaW4gSW50ZXJuYXRpb25hbCBNYW5hZ2VtZW50IGFuZCBHbG9iYWwgQnVzaW5lc3MgKExNNDMyKTlNYXN0ZXIgb2YgU2NpZW5jZSBpbiBNYWNoaW5lIExlYXJuaW5nIGZvciBGaW5hbmNlIChMTTQ3OSk/TWFzdGVyIG9mIFNjaWVuY2UgaW4gTWFya2V0aW5nLCBDb25zdW1wdGlvbiBhbmQgU29jaWV0eSAoTE00MzEpM01hc3RlciBvZiBTY2llbmNlIGluIE1hdGhlbWF0aWNhbCBNb2RlbGxpbmcgKExNNjM2KTNNYXN0ZXIgb2YgU2NpZW5jZSBpbiBNZWNoYW5pY2FsIEVuZ2luZWVyaW5nIChMTTgwMSlTTWFzdGVyIG9mIFNjaWVuY2UgaW4gTWVudGFsIFNraWxscyBhbmQgTWVudGFsIEhlYWx0aCBpbiBTcG9ydHMgYW5kIEV4ZXJjaXNlIChMTTcyOCk0TWFzdGVyIG9mIFNjaWVuY2UgaW4gTnVyc2luZyAoRGVtZW50aWEgQ2FyZSkgKExNNjc4KTNNYXN0ZXIgb2YgU2NpZW5jZSBpbiBOdXJzaW5nIChPbGRlciBQZXJzb24pIChMTTY5OCk2TWFzdGVyIG9mIFNjaWVuY2UgaW4gTnVyc2luZyAoUGFsbGlhdGl2ZSBDYXJlKSAoTE02MTcpOk1hc3RlciBvZiBTY2llbmNlIGluIE51cnNpbmcgKFBlcmktT3BlcmF0aXZlIENhcmUpIChMTTYxOClXTWFzdGVyIG9mIFNjaWVuY2UgaW4gTnVyc2luZyAoUHN5Y2hvc29jaWFsIEludGVydmVudGlvbnMgaW4gTWVudGFsIEhlYWx0aCBDYXJlKSAoTE02MDUpN01hc3RlciBvZiBTY2llbmNlIGluIE51cnNpbmcgKFJlc3BpcmF0b3J5IENhcmUpIChMTTYxMiksTWFzdGVyIG9mIFNjaWVuY2UgaW4gTnVyc2luZyBTdHVkaWVzIChMTTY3NylOTWFzdGVyIG9mIFNjaWVuY2UgaW4gT2NjdXBhdGlvbmFsIFRoZXJhcHkgKFByb2Zlc3Npb25hbCBRdWFsaWZpY2F0aW9uKSAoTE0zNzMpNE1hc3RlciBvZiBTY2llbmNlIGluIFBlcmluYXRhbCBNZW50YWwgSGVhbHRoIChMTTQ0OClHTWFzdGVyIG9mIFNjaWVuY2UgaW4gUGh5c2lvdGhlcmFweSAoUHJvZmVzc2lvbmFsIFF1YWxpZmljYXRpb24pIChMTTY5MikvTWFzdGVyIG9mIFNjaWVuY2UgaW4gUHJvamVjdCBNYW5hZ2VtZW50IChMTTQ0OSk9TWFzdGVyIG9mIFNjaWVuY2UgaW4gUHJvamVjdCBhbmQgUHJvZ3JhbW1lIE1hbmFnZW1lbnQgKExNNjY1KTJNYXN0ZXIgb2YgU2NpZW5jZSBpbiBQc3ljaG9sb2dpY2FsIFNjaWVuY2UgKExNNDQ2KSpNYXN0ZXIgb2YgU2NpZW5jZSBpbiBQdWJsaWMgSGVhbHRoIChMTTY4OSk2TWFzdGVyIG9mIFNjaWVuY2UgaW4gUHVibGljIEhlYWx0aCAoUGFydC1UaW1lKSAoTE02ODUpL01hc3RlciBvZiBTY2llbmNlIGluIFF1YWxpdHkgTWFuYWdlbWVudCAoTE0zNDQpOk1hc3RlciBvZiBTY2llbmNlIGluIFJpc2sgTWFuYWdlbWVudCBhbmQgSW5zdXJhbmNlIChMTTQ4MilITWFzdGVyIG9mIFNjaWVuY2UgaW4gU29mdHdhcmUgRGV2ZWxvcG1lbnQ6IEludGVybmF0aW9uYWwgU3lzdGVtcyAoTE04MDUpMU1hc3RlciBvZiBTY2llbmNlIGluIFNvZnR3YXJlIEVuZ2luZWVyaW5nIChMTTMzOClVTWFzdGVyIG9mIFNjaWVuY2UgaW4gU3BlZWNoIGFuZCBMYW5ndWFnZSBUaGVyYXB5IChQcm9mZXNzaW9uYWwgUXVhbGlmaWNhdGlvbikgKExNMzc0KUdNYXN0ZXIgb2YgU2NpZW5jZSBpbiBTcG9ydCwgRXhlcmNpc2UgYW5kIFBlcmZvcm1hbmNlIFBzeWNob2xvZ3kgKExNNjMxKS9NYXN0ZXIgb2YgU2NpZW5jZSBpbiBTcG9ydHMgUGVyZm9ybWFuY2UgKExNNjI5KS9NYXN0ZXIgb2YgU2NpZW5jZSBpbiBTcG9ydHMgUGVyZm9ybWFuY2UgKExNNjQ2KU5NYXN0ZXIgb2YgU2NpZW5jZSBpbiBTdHJhdGVnaWMgUXVhbGl0eSBNYW5hZ2VtZW50IChMZWFuIFNpZ21hIFN5c3RlbXMpIChMTTcwNCk0TWFzdGVyIG9mIFNjaWVuY2UgaW4gU3VwcGx5IENoYWluIE9wZXJhdGlvbnMgKExNNjM4KVFNYXN0ZXIgb2YgU2NpZW5jZSBpbiBTdXN0YWluYWJsZSBSZXNvdXJjZSBNYW5hZ2VtZW50OiBQb2xpY3kgYW5kIFByYWN0aWNlIChMTTY3MCkyTWFzdGVyIG9mIFNjaWVuY2UgaW4gVGVjaG5vbG9neSBNYW5hZ2VtZW50IChMTTUzNSk+TWFzdGVyIG9mIFNjaWVuY2UgaW4gV29yayBhbmQgT3JnYW5pc2F0aW9uYWwgQmVoYXZpb3VyIChMTTQzMyk+TWFzdGVyIG9mIFNjaWVuY2UgaW4gV29yayBhbmQgT3JnYW5pc2F0aW9uYWwgQmVoYXZpb3VyIChMTTUyOSk/TWFzdGVyIG9mIFNjaWVuY2UgaW4gV29yayBhbmQgT3JnYW5pc2F0aW9uYWwgUHN5Y2hvbG9neSAoTE0zMjUpP01hc3RlciBvZiBTY2llbmNlIGluIFdvcmsgYW5kIE9yZ2FuaXNhdGlvbmFsIFBzeWNob2xvZ3kgKExNNTE2KRpNYXN0ZXIgb2YgVGF4YXRpb24gKExNNDM0KTVNYXN0ZXIgb2YgVGVjaG5vbG9neSBpbiBTYWZldHkgYW5kIEVyZ29ub21pY3MgKExNNTMzKSxNYXN0ZXJzIERlZ3JlZSBpbiBBcnQgYW5kIFRlY2hub2xvZ3kgKExNODAzKTtNYXN0ZXJzIERlZ3JlZSBpbiBJbnRlcmFjdGlvbiBhbmQgRXhwZXJpZW5jZSBEZXNpZ24gKExNODA3KTxNYXN0ZXJzIGluIEludGVybmF0aW9uYWwgRW50cmVwcmVuZXVyc2hpcCBNYW5hZ2VtZW50IChMTTMzNCkpTWF0dXJlIFN0dWRlbnQgQWNjZXNzIENlcnRpZmljYXRlIChMTTE5MSk+UG9zdGdyYWR1YXRlIENlcnRpZmljYXRlIGluIEFkdmFuY2VkIENsaW5pY2FsIFByYWN0aWNlIChMTTY3NCkxUG9zdGdyYWR1YXRlIERpcGxvbWEgaW4gU2Nob29sIExlYWRlcnNoaXAgKExNNTUzKThQcm9mZXNzaW9uYWwgRGlwbG9tYSBpbiBNYXRoZW1hdGljcyBmb3IgVGVhY2hpbmcgKExNMjcxKTVQcm9mZXNzaW9uYWwgRG9jdG9yYXRlIGluIEhlYWx0aGNhcmUgUHJhY3RpY2UgKExNNjk5KShQcm9mZXNzaW9uYWwgTWFzdGVyIG9mIEVkdWNhdGlvbiAoTE02OTYpMFByb2Zlc3Npb25hbCBNYXN0ZXIgb2YgRWR1Y2F0aW9uIChNdXNpYykgKExNMzgyKTpTcGVjaWFsaXN0IERpcGxvbWEgaW4gQXZpYXRpb24gTGVhc2luZyBhbmQgRmluYW5jZSAoTE02MzkpPVNwZWNpYWxpc3QgRGlwbG9tYSBpbiBEZXNpZ24gZm9yIE1lZGljYWwgVGVjaG5vbG9naWVzIChMTTY0Myk6U3BlY2lhbGlzdCBEaXBsb21hIGluIEVtYmVkZGVkIFN5c3RlbXMgRW5naW5lZXJpbmcgKExNOTc0KT5TcGVjaWFsaXN0IERpcGxvbWEgaW4gSW5mb3JtYXRpb24gYW5kIE5ldHdvcmsgU2VjdXJpdHkgKExNNzE4KTNTcGVjaWFsaXN0IERpcGxvbWEgaW4gSW5ub3ZhdGlvbiBNYW5hZ2VtZW50IChMTTcwOSkxU3BlY2lhbGlzdCBEaXBsb21hIGluIE1hbmFnZW1lbnQgUHJhY3RpY2UgKExNNjY4KTJTcGVjaWFsaXN0IERpcGxvbWEgaW4gTWFya2V0aW5nIE1hbmFnZW1lbnQgKExNNjY5KTBTcGVjaWFsaXN0IERpcGxvbWEgaW4gUHJvamVjdCBNYW5hZ2VtZW50IChMTTk4MylKU3BlY2lhbGlzdCBEaXBsb21hIGluIFF1YWxpdHkgTWFuYWdlbWVudCAtIExlYW4gSGVhbHRoY2FyZSBTeXN0ZW1zIChMTTI0Nyk/U3BlY2lhbGlzdCBEaXBsb21hIGluIFF1YWxpdHkgTWFuYWdlbWVudCAtIExlYW4gU3lzdGVtcyAoTE00MDMpPFNwZWNpYWxpc3QgRGlwbG9tYSBpbiBRdWFsaXR5IE1hbmFnZW1lbnQgLSBTaXggU2lnbWEgKExNNjQxKUhTcGVjaWFsaXN0IERpcGxvbWEgaW4gUmVndWxhdG9yeSBBZmZhaXJzIGluIChCaW8pUGhhcm1hY2V1dGljYWxzIChMTTI3NylfU3BlY2lhbGlzdCBEaXBsb21hIGluIFN0cmF0ZWdpYyBMZWFkZXJzaGlwIGluIHRoZSBBZ2Ugb2YgRGlnaXRhbCBEaXNydXB0aW9uIChQYXJ0LXRpbWUpIChMTTI4OSk1U3BlY2lhbGlzdCBEaXBsb21hIGluIFN1cHBseSBDaGFpbiBNYW5hZ2VtZW50IChMTTQ2Nik/U3BlY2lhbGlzdCBEaXBsb21hIGluIFRlYWNoaW5nIExlYXJuaW5nIGFuZCBTY2hvbGFyc2hpcCAoTE01NzcpOlNwZWNpYWxpc3QgRGlwbG9tYSBpbiBUZWNobm9sb2d5IENvbW1lcmNpYWxpc2F0aW9uIChMTTcwOCkrU3RydWN0dXJlZCBQaEQgaW4gUHVibGljIEh1bWFuaXRpZXMgKExNODExKSZTdW1tZXIgU2Nob29sIGluIElyaXNoIFN0dWRpZXMgKExNWFhYKRXBAgItMQVMTTA5OQVMTTAwMgVMTTA0NAVMTTI0OQVMTTIyNwVMTTEzMwVMTTAyOAVMTTA0MAVMTTIxNQVMTTA1NgVMTTA0MwVMTTEzMgVMTTEzMQVMTTAzOQVMTTAzOQVMTTAyMAVMTTAyNgVMTTAyMgVMTTAzOAVMTTY5OAVMTTEzNAVMTTEzNQVMTTA1MAVMTTA1MgVMTTA1MwVMTTA1NQVMTTA1NAVMTTA5MQVMTTExNgVMTTA3NwVMTTA3MQVMTTExNQVMTTA4NQVMTTExOQVMTTExOAVMTTA3MwVMTTA0OQVMTTIzMAVMTTAyOQVMTTEwMQVMTTA5MgVMTTA5NwVMTTA5NgVMTTE1MAVMTTE1NAVMTTE1MgVMTTEyMAVMTTA2NQVMTTEyMwVMTTE4NwVMTTExMAVMTTEyMQVMTTA1MQVMTTA4MgVMTTEyMgVMTTExMwVMTTAzNwVMTTAzNwVMTTI2MQVMTTA2NgVMTTA5MwVMTTE4NgVMTTIwMwVMTTI2NgVMTTA1OAVMTTA2OAVMTTA2NAVMTTA2MAVMTTEyNAVMTTA4OAVMTTE1NgVMTTA4MwVMTTExNAVMTTE5NgVMTTEwMwVMTTI2MwVMTTA2MQVMTTA5MAVMTTEyNQVMTTEwMAVMTTA3NgVMTTEwMgVMTTk1MAVMTTA4OQVMTTI2OQVMTTA2MwVMTTA5NAVMTTA5NQVMTVhYWAVMTTE5MgVMTTk1NgVMTTE4MAVMTTI0MwVMTTI2OAVMTTI2MAVMTTQ5MAVMTTI0OAVMTTIzNgVMTTQxNQVMTTEzMAVMTTE5NQVMTTI3OQVMTTI3OAVMTTI3MgVMTTI2MgVMTTQxOAVMTTIzNwVMTTI4OAVMTTIyMgVMTTIyOAVMTTIwMAVMTTIxOQVMTTE4MgVMTTIwMgVMTTI2NwVMTTQxMAVMTTIyOQVMTTQxMgVMTTQ3MwVMTTI2NAVMTTI4MAVMTTIwOQVMTTYxMAVMTTgxMQVMTTcxNwVMTTczMAVMTTQ5NAVMTTQwNQVMTTM3OQVMTTMzMQVMTTQwOAVMTTU5MQVMTTY1NAVMTTU4OAVMTTM2NAVMTTM0MAVMTTQ2NwVMTTQzNgVMTTIwMQVMTTI3MAVMTTYzNwVMTTI4NAVMTTI4MQVMTTE4NQVMTTM3NQVMTTcxMAVMTTkxMQVMTTU5MwVMTTQ5MgVMTTY1NwVMTTkwMgVMTTgwMwVMTTMzNQVMTTMwNwVMTTI5OAVMTTQ5MwVMTTQwMQVMTTU4MQVMTTkwOQVMTTkwNAVMTTk5NwVMTTI5NwVMTTQzNwVMTTcyMAVMTTMxNgVMTTMxNwVMTTQ0NQVMTTI5NQVMTTQzOAVMTTQyNwVMTTU5OAVMTTkxMAVMTTU3OQVMTTU2MAVMTTM4OAVMTTQwMgVMTTU4NAVMTTQyMwVMTTMxMQVMTTMyNwVMTTUwNgVMTTkwNwVMTTkwOAVMTTI5NgVMTTQwOQVMTTQwOQVMTTUwNAVMTTM5OQVMTTMwOQVMTTMwNgVMTTQwNgVMTTYyOAVMTTM5NwVMTTUwMgVMTTMwOAVMTTY1NgVMTTM5NQVMTTU4NwVMTTQ0MAVMTTY1MwVMTTQ5MQVMTTMwMQVMTTQzNgVMTTY1MQVMTTUxMQVMTTU1NAVMTTcyNAVMTTU3MwVMTTcyNwVMTTM0NgVMTTM3MQVMTTM4NgVMTTYzNAVMTTM3MgVMTTM2MwVMTTcyNgVMTTQyNAVMTTU5NAVMTTQyNgVMTTU5NgVMTTQyMQVMTTU5NwVMTTY4NwVMTTY4NgVMTTgwOQVMTTgwNAVMTTY5NQVMTTc5OQVMTTM1NQVMTTY3OQVMTTY4MwVMTTM2MQVMTTgwMAVMTTYyMwVMTTk5MAVMTVhYWAVMTTcxOQVMTTk3NgVMTTM1NgVMTTQ4NQVMTTc5OAVMTTY5NwVMTTcyOQVMTTgwOAVMTTQ4MQVMTTQ4MwVMTTk3NQVMTTMyOQVMTTYzNQVMTTcyNQVMTTMyOAVMTTUxMwVMTTgxMwVMTTQzMgVMTTQ3OQVMTTQzMQVMTTYzNgVMTTgwMQVMTTcyOAVMTTY3OAVMTTY5OAVMTTYxNwVMTTYxOAVMTTYwNQVMTTYxMgVMTTY3NwVMTTM3MwVMTTQ0OAVMTTY5MgVMTTQ0OQVMTTY2NQVMTTQ0NgVMTTY4OQVMTTY4NQVMTTM0NAVMTTQ4MgVMTTgwNQVMTTMzOAVMTTM3NAVMTTYzMQVMTTYyOQVMTTY0NgVMTTcwNAVMTTYzOAVMTTY3MAVMTTUzNQVMTTQzMwVMTTUyOQVMTTMyNQVMTTUxNgVMTTQzNAVMTTUzMwVMTTgwMwVMTTgwNwVMTTMzNAVMTTE5MQVMTTY3NAVMTTU1MwVMTTI3MQVMTTY5OQVMTTY5NgVMTTM4MgVMTTYzOQVMTTY0MwVMTTk3NAVMTTcxOAVMTTcwOQVMTTY2OAVMTTY2OQVMTTk4MwVMTTI0NwVMTTQwMwVMTTY0MQVMTTI3NwVMTTI4OQVMTTQ2NgVMTTU3NwVMTTcwOAVMTTgxMQVMTVhYWBQrA8ECZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnFgFmZAIGD2QWAgIBDzwrABEBDBQrAABkGAEFKWN0bDAwJE1haW5Db250ZW50JENvdXJzZVRpbWV0YWJsZUdyaWRWaWV3D2dkxwYw8T0Lb6xgrUt+u3m9EoSBy00+BUCYu6Avl3e2+V0=